c
@res.headers
@res.headers['Set-Cookie'] = 'mycookie'
@res.headers
@res.methods
@res.class
@res.headers
@res.header
@res
@res['Set-Cookie']
@res
Rack::Utils.parse_query({})
@res.headers
c
res[1]
res[0]
res.body
res
serve_file(file_path, res)
File.exists?(file_path)
file_path
c
File.read(file_path)
File::read(file_path)
file_path
c
response
next
response
next
net
c
@app.call(env)
c
body
c
env['PATH_INFO']
env.PATH_INFO
env
c
res.body
res.class
res.body
res
c
@app.call
@app.methods
App.body
@app
c
body
c
e.class
body
e
body
c
body
cbody
c
body.split("\n")
body.class
body
c
source_line_num(e)
e.message
e.class
extract_formatted_source(e)
source_line_num(e)
e.backtrace
e.stacktrace
e
c
e.[Bc
e.to_enum
e.number
e.code
e.to_s
e.message
e.methods
e
c
  controller = @controller_class.new(req, res, route_params)
route_params
next
c
n
next
c
nextc
next
c
    controller = @controller_class.classify.new(req, res, route_params)
    controller = @controller_class.clasify.new(req, res, route_params)
@controller_class.constantize
@controller_class
route_params
controller = @controller_class.constantize.new(req, res, route_params)
next
c
load 'active_support/inflector'
require 'active_support/inflector'
require 'active_support'
 @controller_class.new(req, res, route_params)
route_params
next
c
route_params
next
req.fullpath.match(@pattern)
c
@pattern
c
@pattern
match
match = full_string.match(@pattern)
full_string
full_string = "#{req.fullpath}(?<id>\d+)"
@pattern.to_s
@pattern.class
regex_pattern = @pattern + "(?<id>\d+)"
ex.class
ex.clss
ex = "#{@pattern}"
ex = _
"#{@pattern}"
regex_pattern = "#{@pattern}(?<id>\d+)"
regex_pattern
@pattern
match = '/users/123'.match(regex_pattern)
regex_pattern = "#{@pattern}(?<id>\d+)/"
    req.fullpath.match(regex_pattern)
  regex_pattern = "#{@pattern}(?<id>\d+)/"
@pattern
'/users/123'.match("/(?<id>#{@pattern})/")
regex
regex = req.fullpath.match("/(?<id>#{@pattern})/")
req.url
@pattern
req.fullpath
req.params
req.url
req.body
res.class
res.keys
res.names
res
req
regex
@action_name
@http_method
self.class
self.
@controller_class
@pattern
c
proc.call{Regexp.new("^/cats$"), Cats2Controller, :index}
proc.call(Regexp.new("^/cats$"), Cats2Controller, :index)
get Regexp.new("^/cats$"), Cats2Controller, :index
self.route
self.routes
self
@routes
@route
proc.call
proc
c
req.path.match(@pattern) && @http_method.to_s.upcase == req.request_method
@http_method.to_s.upcase == req.request_method
@http_method.to_s.upcase
req.request_method.to_sym
req.request_method
@http_method
c
(req.path =~ @pattern).class
req.path =~ @pattern
@pattern.class
req.path.class
req.path
req.path =~ @pattern
@pattern.match(req.path)
@pattern =~ req.path
@pattern ~= req.path
@pattern
req.path
req
c
res.set_c
res
session['first_key']
next
session['first_key']
session
c
@req
req['first_key']
req
self.data
self
c
req.request.cookie_hash
req
req.cookies
@data
c
JSON::parse(cookie)
json.parse(cookie)
require 'json'
cookie = req.cookies['_rails_lite_app']
req.to_json['_rails_lite_app']
req.to_json.cookies
req.to_json.class
req.to_json
req.json
json(cookie)
cookie = req.cookies['_rails_lite_app']
req.cookies['_rails_lite_app'].json
req.cookies['_rails_lite_app'].to_json.class
req.cookies['_rails_lite_app'].class
req.cookies['_rails_lite_app'].to_json
req.cookies['_rails_lite_app']
req.cookies._rails_lite_app
req.cookies
req
@res
res
self.cookies
self.cookie('_rails_lite_app')
self.cookie(_rails_lite_app)
self.cookie(rails_lite_app)
self
self.rails_lite_app
self._rails_lite_app
_rails_lite_app
c
render_content(content, 'text/html')
content.class
content.type
content
content = ERB.new("<%= f %>").result(binding)
f = File.read(path)
path = 'views/' + self.class.to_s.underscore + '/' + template_name.to_s + '.html.erb'
fpath = 'views/' + self.class.to_s.underscore + '/' + template_name.to_s + '.html.erb'
path = '/' + self.class.to_s.underscore + '/' + template_name.to_s + '.rb'
f
f = File.read(path)
path = '/' + self.class.to_s.underscore + '/' + template_name.to_s
f = File.read(path)
path = self.class.to_s.underscore + '/' + template_name.to_s
self.class.to_s.underscore + '/' + template_name.to_s
template_name.to_s
template_name.class
template_name
self.class.to_s.underscore
require 'active_support/inflector'
ActiveSupport.underscore(self.class)
